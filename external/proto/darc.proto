syntax = "proto2";
package darc;
option java_package = "ch.epfl.dedis.proto";
option java_outer_classname = "DarcProto";

// ***
// These are the messages used in the API-calls
// ***

// Darc is the basic structure representing an access control. A Darc can
// evolve in the way that a new Darc points to the previous one and is signed
// by the owner(s) of the previous Darc.
message Darc {
  // Version should be monotonically increasing over the evolution of a
  // Darc.
  required uint64 version = 1;
  // Description is a free-form field that can hold any data as required
  // by the user. Darc itself will never depend on any of the data in
  // here.
  required bytes description = 2;
  // BaseID is the ID of the first darc in the chain of evolution. It is
  // not set if the darc is on version 0.
  optional bytes baseid = 3;
  // PrevID is the previous darc ID in the chain of evolution.
  required bytes previd = 4;
  // Rules map an action to an expression.
  required Rules rules = 5;
  // Signature is calculated on the Request-representation of the darc.
  // It needs to be created by identities that have the "_evolve" action
  // from the previous valid Darc.
  repeated Signature signatures = 6;
  // VerificationDarcs are a list of darcs that the verifier needs to
  // verify this darc. It is not needed in online verification where the
  // verifier stores all darcs.
  repeated Darc verificationdarcs = 7;
}

// Identity is a generic structure can be either an Ed25519 public key, a Darc
// or a X509 Identity.
message Identity {
  // Darc identity
  optional IdentityDarc darc = 1;
  // Public-key identity
  optional IdentityEd25519 ed25519 = 2;
  // Public-key identity
  optional IdentityX509EC x509ec = 3;
}

// IdentityEd25519 holds a Ed25519 public key (Point)
message IdentityEd25519 {
  required bytes point = 1;
}

// IdentityX509EC holds a public key from a X509EC
message IdentityX509EC {
  required bytes public = 1;
}

// IdentityDarc is a structure that points to a Darc with a given ID on a
// skipchain. The signer should belong to the Darc.
message IdentityDarc {
  // Signer SignerEd25519
  required bytes id = 1;
}

// Signature is a signature on a Darc to accept a given decision.
// can be verified using the appropriate identity.
message Signature {
  // The signature itself
  required bytes signature = 1;
  // Signer is the Idenity (public key or another Darc) of the signer
  required Identity signer = 2;
}

// Signer is a generic structure that can hold different types of signers
message Signer {
  optional SignerEd25519 ed25519 = 1;
  optional SignerX509EC x509ec = 2;
}

// SignerEd25519 holds a public and private keys necessary to sign Darcs
message SignerEd25519 {
  required bytes point = 1;
  required bytes secret = 2;
}

// SignerX509EC holds a public and private keys necessary to sign Darcs,
// but the private key will not be given out.
message SignerX509EC {
  required bytes point = 1;
}

// Request is the structure that the client must provide to be verified
message Request {
  required bytes baseid = 1;
  required string action = 2;
  required bytes msg = 3;
  repeated Identity identities = 4;
  repeated bytes signatures = 5;
}

// Rules is a list of action-expression associations.
message Rules {
  repeated Rule list = 1;
}

// Rule is a pair of action and expression.
message Rule {
  required string action = 1;
  required bytes expr = 2;
}
