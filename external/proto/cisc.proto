syntax = "proto2";
package cisc;
import "skipchain.proto";
import "onet.proto";
import "pop.proto";

option java_package = "ch.epfl.dedis.proto";
option java_outer_classname = "CiscProto";

// IDBlock stores one identity together with the skipblocks.
message IDBlock {
  optional Data latest = 1;
  optional Data proposed = 2;
  optional skipchain.SkipBlock latestskipblock = 3;
}

// Data holds the information about all devices and the data stored in this
// identity-blockchain. All Devices have voting-rights to the Data-structure.
message Data {
  // Threshold of how many devices need to sign to accept the new block
  required sint32 threshold = 1;
  // Device is a list of all devices allowed to sign
   map<string, Device> device = 2;
  // Storage is the key/value storage
   map<string, string> storage = 3;
  // Roster is the new proposed roster - nil if the old is to be used
  optional onet.Roster roster = 4;
  // Votes for that block, mapped by name of the devices.
  // This has to be verified with the previous data-block, because only
  // the previous data-block has the authority to sign for a new block.
   map<string, bytes> votes = 5;
}

// Device is represented by a public key.
message Device {
  // Point is the public key of that device
  required bytes point = 1;
}

// ***
// These are the messages used in the API-calls
// ***

// PinRequest used for admin autentification
message PinRequest {
  required string pin = 1;
  required bytes public = 2;
}

// StoreKeys used for setting autentification
message StoreKeys {
  required sint32 type = 1;
  optional pop.FinalStatement final = 2;
  repeated bytes publics = 3;
  required bytes sig = 4;
}

// CreateIdentity starts a new identity-skipchain with the initial
// Data and asking all nodes in Roster to participate.
message CreateIdentity {
  // Data is the first data that will be stored in the genesis-block. It should
  // contain the roster and at least one public key
  optional Data data = 1;
  // What type of authentication we're doing
  required sint32 type = 2;
  // SchnSig is optional; one of Public or SchnSig must be set.
  optional bytes schnsig = 3;
  // authentication via Linkable Ring Signature
  required bytes sig = 4;
  // Nonce plays in this case message of authentication
  required bytes nonce = 5;
}

// CreateIdentityReply is the reply when a new Identity has been added. It
// returns the Root and Data-skipchain.
message CreateIdentityReply {
  optional skipchain.SkipBlock genesis = 1;
}

// DataUpdate verifies if a new update is available.
message DataUpdate {
  required bytes id = 1;
}

// DataUpdateReply returns the updated data.
message DataUpdateReply {
  optional Data data = 1;
}

// ProposeSend sends a new proposition to be stored in all identities. It
// either replies a nil-message for success or an error.
message ProposeSend {
  required bytes id = 1;
  optional Data propose = 2;
}

// ProposeUpdate verifies if new data is available.
message ProposeUpdate {
  required bytes id = 1;
}

// ProposeUpdateReply returns the updated propose-data.
message ProposeUpdateReply {
  optional Data propose = 1;
}

// ProposeVote sends the signature for a specific IdentityList. It replies nil
// if the threshold hasn't been reached, or the new SkipBlock
message ProposeVote {
  required bytes id = 1;
  required string signer = 2;
  required bytes signature = 3;
}

// ProposeVoteReply returns the signed new skipblock if the threshold of
// votes have arrived.
message ProposeVoteReply {
  optional skipchain.SkipBlock data = 1;
}

// Messages to be sent from one identity to another

// PropagateIdentity sends a new identity to other identityServices
message PropagateIdentity {
  optional IDBlock idblock = 1;
  required string tag = 2;
  required string pubstr = 3;
}

// UpdateSkipBlock asks the service to fetch the latest SkipBlock
message UpdateSkipBlock {
  required bytes id = 1;
  optional skipchain.SkipBlock latest = 2;
}

// Authenticate first message of authentication protocol
// Empty message serves as trigger to start authentication protocol
// It also serves as response from server to sign nonce within LinkCtx
message Authenticate {
  required bytes nonce = 1;
  required bytes ctx = 2;
}
