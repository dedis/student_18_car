syntax = "proto2";
package pop;
import "onet.proto";
import "darc.proto";

option java_package = "ch.epfl.dedis.proto";
option java_outer_classname = "PoPProto";

// ShortDesc represents Short Description of Pop party
// Used in merge configuration
message ShortDesc {
  required string location = 1;
  optional onet.Roster roster = 2;
}

// PopDesc holds the name, date and a roster of all involved conodes.
message PopDesc {
  // Name and purpose of the party.
  required string name = 1;
  // DateTime of the party. It is in the following format, following UTC:
  // YYYY-MM-DD HH:mm
  required string datetime = 2;
  // Location of the party
  required string location = 3;
  // Roster of all responsible conodes for that party.
  optional onet.Roster roster = 4;
  // List of parties to be merged
  repeated ShortDesc parties = 5;
}

// FinalStatement is the final configuration holding all data necessary
// for a verifier.
message FinalStatement {
  // Desc is the description of the pop-party.
  optional PopDesc desc = 1;
  // Attendees holds a slice of all public keys of the attendees.
  repeated bytes attendees = 2;
  // Signature is created by all conodes responsible for that pop-party
  required bytes signature = 3;
  // Flag indicates that party was merged
  required bool merged = 4;
}

// CheckConfig asks whether the pop-config and the attendees are available.
message CheckConfig {
  required bytes pophash = 1;
  repeated bytes attendees = 2;
}

// CheckConfigReply sends back an integer for the Pop. 0 means no config yet,
// other values are defined as constants.
// If PopStatus == PopStatusOK, then the Attendees will be the common attendees between
// the two nodes.
message CheckConfigReply {
  required sint32 popstatus = 1;
  required bytes pophash = 2;
  repeated bytes attendees = 3;
}

// MergeConfig asks if party is ready to merge
message MergeConfig {
  // FinalStatement of current party
  optional FinalStatement final = 1;
  // Hash of PopDesc party to merge with
  required bytes id = 2;
}

// MergeConfigReply responds with info of asked party
message MergeConfigReply {
  // status of merging process
  required sint32 popstatus = 1;
  // hash of party was asking to merge
  required bytes pophash = 2;
  // FinalStatement of party was asked to merge
  optional FinalStatement final = 3;
}

// PinRequest will print a random pin on stdout if the pin is empty. If
// the pin is given and is equal to the random pin chosen before, the
// public-key is stored as a reference to the allowed client.
message PinRequest {
  required string pin = 1;
  required bytes public = 2;
}

// StoreConfig presents a config to store
message StoreConfig {
  optional PopDesc desc = 1;
  required bytes signature = 2;
}

// StoreConfigReply gives back the hash.
// TODO: StoreConfigReply will give in a later version a handler that can be used to
// identify that config.
message StoreConfigReply {
  required bytes id = 1;
}

// FinalizeRequest asks to finalize on the given descid-popconfig.
message FinalizeRequest {
  required bytes descid = 1;
  repeated bytes attendees = 2;
  required bytes signature = 3;
}

// FinalizeResponse returns the FinalStatement if all conodes already received
// a PopDesc and signed off. The FinalStatement holds the updated PopDesc, the
// pruned attendees-public-key-list and the collective signature.
message FinalizeResponse {
  optional FinalStatement final = 1;
}

// FetchRequest asks to get FinalStatement
message FetchRequest {
  required bytes id = 1;
  optional bool returnuncomplete = 2;
}

// MergeRequest asks to start merging process for given Party
message MergeRequest {
  required bytes id = 1;
  required bytes signature = 2;
}

// GetProposals asks the conode to return a list of all waiting proposals. A waiting
// proposal is either deleted after 1h or if it has been confirmed using
// StoreConfig.
message GetProposals {
}

// GetProposalsReply returns the list of all waiting proposals on that node.
message GetProposalsReply {
  repeated PopDesc proposals = 1;
}

// VerifyLink returns if a given public key is linked.
message VerifyLink {
  required bytes public = 1;
}

// VerifyLinkReply returns true if the public key is in the admin-list.
message VerifyLinkReply {
  required bool exists = 1;
}

// GetLink returns the public key of the linked organizer.
message GetLink {
}

// GetLinkReply holds the public key of the linked organizer.
message GetLinkReply {
  required bytes public = 1;
}

// GetFinalStatements returns all stored final statements.
message GetFinalStatements {
}

// GetFinalStatementsReply returns all stored final statements.
message GetFinalStatementsReply {
   map<string, FinalStatement> finalstatements = 1;
}

// StoreInstanceID writes an InstanceID from ByzCoin to a FinalStatement.
message StoreInstanceID {
  required bytes partyid = 1;
  required bytes instanceid = 2;
}

// StoreInstanceIDReply is an empty reply
message StoreInstanceIDReply {
}

// GetInstanceID requests an InstanceID from ByzCoin to a FinalStatement.
message GetInstanceID {
  required bytes partyid = 1;
}

// GetInstanceIDReply is the InstanceID for the party
message GetInstanceIDReply {
  required bytes instanceid = 1;
}

// StoreSigner writes an Signer from ByzCoin to a FinalStatement.
message StoreSigner {
  required bytes partyid = 1;
  required darc.Signer signer = 2;
}

// StoreSignerReply is an empty reply
message StoreSignerReply {
}

// GetSigner requests an Signer from ByzCoin to a FinalStatement.
message GetSigner {
  required bytes partyid = 1;
}

// GetSignerReply is the Signer for the party
message GetSignerReply {
  required darc.Signer signer = 1;
}

// StoreKeys stores a list of keys for attendees to retrieve
// later.
message StoreKeys {
  // ID is the ID of the party where we want to store intermediate keys
  required bytes id = 1;
  // Keys is a list of public keys to store
  repeated bytes keys = 2;
  // Signature proves that the organizer updated the keys
  required bytes signature = 3;
}

// StoreKeysReply is an empty message.
message StoreKeysReply {
}

// GetKeys can be used to retrieve the keyset for a given party - useful
// for an attendee to know if his key has been scanned.
message GetKeys {
  required bytes id = 1;
}

// GetKeysReply returns the keys stored for a given Party-ID.
message GetKeysReply {
  required bytes id = 1;
  repeated bytes keys = 2;
}

// PopPartyInstance is the data that is stored in a pop-party instance.
message PopPartyInstance {
  // State has one of the following values:
  // 1: it is a configuration only
  // 2: it is a finalized pop-party
  required sint32 state = 1;
  // FinalStatement has either only the Desc inside if State == 1, or all fields
  // set if State == 2.
  optional FinalStatement finalstatement = 2;
  // Previous is the link to the instanceID of the previous party, it can be
  // nil for the first party.
  required bytes previous = 3;
  // Next is a link to the instanceID of the next party. It can be
  // nil if there is no next party.
  required bytes next = 4;
  // Public key of service - can be nil.
  optional bytes service = 5;
}
